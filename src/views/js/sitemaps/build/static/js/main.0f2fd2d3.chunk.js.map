{"version":3,"sources":["instance.js","pages/Sitemaps.js","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","headers","content-type","Accept","Sitemaps","_useState","useState","_useState2","Object","slicedToArray","links","setLinks","schema","Yup","shape","name","required","link","tag","handleSubmit","data","post","then","res","useEffect","get","react_default","a","createElement","index_es","onSubmit","placeholder","className","type","map","key","id","width","onClick","delete","concat","Search","selectedOption","setSelectedOption","_useState3","_useState4","options","setOptions","NoSsr","react_select_browser_esm","value","onChange","window","location","href","App","react_router_dom","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f2fd2d3.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: `http://127.0.0.1:8000/`,\r\n    headers: {'content-type': 'application/json', 'Accept': 'application/json',},\r\n\r\n});\r\nexport default instance","import React, {useEffect, useState} from 'react';\r\nimport {Form, Input} from '@rocketseat/unform';\r\nimport * as Yup from 'yup';\r\nimport instance from \"../instance\";\r\n\r\nconst Sitemaps = () => {\r\n    const [links, setLinks] = useState([])\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .required(),\r\n        link: Yup.string()\r\n            .required(),\r\n        tag: Yup.string()\r\n            .required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        instance\r\n            .get('acr/sitemaps/links')\r\n            .then(function (res) {\r\n                setLinks(res.data)\r\n            })\r\n    }, [])\r\n\r\n    function handleSubmit(data) {\r\n        instance\r\n            .post('acr/sitemaps/links', {\r\n                name: data.name,\r\n                link: data.link,\r\n                tag: data.tag,\r\n            })\r\n            .then(function (res) {\r\n                setLinks(res.data)\r\n            })\r\n    }\r\n\r\n    const deleteLink = (id) => {\r\n        instance\r\n            .delete(`acr/sitemaps/link/${id}`)\r\n            .then(function (res) {\r\n                setLinks(res.data)\r\n            })\r\n    }\r\n    const GetForm = () => {\r\n        return (\r\n            <Form schema={schema} onSubmit={handleSubmit}>\r\n                <Input placeholder=\"Name\" className={'form-control'} name=\"name\"/>\r\n                <Input placeholder=\"Link\" className={'form-control'} name=\"link\"/>\r\n                <Input placeholder=\"Tag\" className={'form-control'} name=\"tag\"/>\r\n                <br/>\r\n                <button className=\"btn btn-primary btn-block\" type=\"submit\">Save</button>\r\n            </Form>)\r\n    }\r\n    const Links = () => {\r\n        return links.map(link => (\r\n                <tr key={link.id}>\r\n                    <td>{link.name}</td>\r\n                    <td width=\"10%\">\r\n                        <div onClick={() => deleteLink(link.id)} className=\"btn btn-danger btn-sm\">DEL</div>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <GetForm/>\r\n            <table className=\"table \">\r\n                <tbody>\r\n                <Links/>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sitemaps;","import React, {useEffect, useState} from 'react';\r\nimport Select from 'react-select';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport instance from \"../instance\";\r\n\r\nconst Search = () => {\r\n    const [selectedOption, setSelectedOption] = useState(null)\r\n    const [options, setOptions] = useState([])\r\n    const handleChange = (selectedOption) => {\r\n        setSelectedOption(selectedOption);\r\n        window.location.href = selectedOption.value\r\n    }\r\n\r\n    useEffect(() => {\r\n        instance\r\n            .get('acr/sitemaps/maps')\r\n            .then(function (res) {\r\n                setOptions(res.data)\r\n            })\r\n    }, [])\r\n    return (\r\n        <NoSsr>\r\n            <Select\r\n                value={selectedOption}\r\n                onChange={handleChange}\r\n                options={options}\r\n            />\r\n        </NoSsr>\r\n\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport {HashRouter as Routes, Route, Switch} from 'react-router-dom';\nimport Sitemaps from \"./pages/Sitemaps\";\nimport Search from \"./pages/Search\";\n\nfunction App() {\n    return (\n        <Routes>\n            <Switch>\n                <Route exact path={'/acr/sitemaps/index'} component={Sitemaps}/>\n                <Route exact path={'/acr/sitemaps/search'} component={Search}/>\n            </Switch>\n        </Routes>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}